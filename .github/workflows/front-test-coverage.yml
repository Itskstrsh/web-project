name: frontend-coverage-80

on:
  pull_request:
    branches: [dev, main]
  push:
    branches: [dev]

jobs:
  frontend-coverage-80:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      # ⬇️ Добавляем недостающие dev-deps, чтобы Jest понимал TS/TSX (Babel-трансформер)
      - name: Add Jest/Babel transformers (if missing)
        run: |
          npm i -D @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript \
                 babel-jest jest-environment-jsdom identity-obj-proxy

      # ⬇️ Пишем babel.config.cjs и jest.ci.config.cjs
      - name: Create Babel & Jest CI config (80% threshold)
        run: |
          cat > babel.config.cjs <<'EOF'
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' } }],
              ['@babel/preset-react', { runtime: 'automatic' }],
              '@babel/preset-typescript',
            ],
          };
          EOF

          cat > jest.ci.config.cjs <<'EOF'
          const fs = require('fs');

          // Используем jest.setup.ts/ts/js если есть
          const setupFile = ['jest.setup.ts', 'jest.setup.tsx', 'jest.setup.js', 'jest.setup.cjs']
            .find(f => fs.existsSync(f));

          module.exports = {
            testEnvironment: 'jest-environment-jsdom',
            transform: {
              '^.+\\.(t|j)sx?$': ['babel-jest', { rootMode: 'upward' }],
            },
            moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],
            moduleNameMapper: {
              // мокаем css/asset импорты
              '\\.(css|less|sass|scss)$': 'identity-obj-proxy',
              '\\.(jpg|jpeg|png|gif|webp|svg)$': '<rootDir>/__mocks__/fileMock.js',
            },
            setupFilesAfterEnv: setupFile ? [setupFile] : [],
            collectCoverage: true,
            coverageDirectory: 'coverage/unit',
            coverageReporters: ['text', 'lcov', 'html'],
            coverageThreshold: {
              global: { statements: 80, branches: 80, functions: 80, lines: 80 },
            },
          };
          EOF

          # простой мок для файлов, если нет папки
          mkdir -p __mocks__
          echo "module.exports = 'file-mock';" > __mocks__/fileMock.js

      - name: Run unit tests with coverage (fails <80%)
        run: npx jest --config jest.ci.config.cjs --runInBand

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage/unit
          if-no-files-found: ignore
