name: frontend-coverage-80

on:
  pull_request:
    branches: [dev, main]
    paths:
      - frontend/**
      - .github/workflows/frontend-coverage-80.yml
  push:
    branches: [dev]
    paths:
      - frontend/**
      - .github/workflows/frontend-coverage-80.yml
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    env:
      CI: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      # трансформеры для TS/TSX/JSX + jsdom
      - name: Add Jest/Babel transformers (if missing)
        run: |
          npm i -D @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript \
                 babel-jest jest-environment-jsdom identity-obj-proxy @testing-library/jest-dom

      - name: Create Babel & Jest CI config (80% threshold)
        run: |
          cat > babel.config.cjs <<'EOF'
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' } }],
              ['@babel/preset-react', { runtime: 'automatic' }],
              '@babel/preset-typescript',
            ],
          };
          EOF

          if [ -f jest.setup.ts ]; then
            SETUP_LINE="setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],"
          elif [ -f jest.setup.js ]; then
            SETUP_LINE="setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],"
          elif [ -f jest.setup.cjs ]; then
            SETUP_LINE="setupFilesAfterEnv: ['<rootDir>/jest.setup.cjs'],"
          else
            SETUP_LINE="setupFilesAfterEnv: ['@testing-library/jest-dom'],"
          fi

          mkdir -p __mocks__
          echo "module.exports = 'file-mock';" > __mocks__/fileMock.js

          cat > jest.ci.config.cjs <<EOF
          module.exports = {
            testEnvironment: 'jest-environment-jsdom',
            transform: { '^.+\\.(t|j)sx?\$': ['babel-jest', { rootMode: 'upward' }] },
            moduleFileExtensions: ['ts','tsx','js','jsx','json'],
            moduleNameMapper: {
              '\\\\.(css|less|sass|scss)\$': 'identity-obj-proxy',
              '\\\\.(jpg|jpeg|png|gif|webp|svg)\$': '<rootDir>/__mocks__/fileMock.js',
            },
            ${SETUP_LINE}
            collectCoverage: true,
            coverageDirectory: 'coverage/unit',
            coverageReporters: ['text','lcov','html'],
            coverageThreshold: { global: { statements: 80, branches: 80, functions: 80, lines: 80 } },
          };
          EOF

      - name: Run unit tests with coverage (fails <80%)
        run: npx jest --config jest.ci.config.cjs --runInBand

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: coverage/unit
          if-no-files-found: ignore
